import json
import os
from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime

router = Router()

DATA_FILE = "data.json"

class SmartPlannerStates(StatesGroup):
    waiting_for_date = State()
    waiting_for_event_text = State()
    waiting_for_show_date = State()

def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    else:
        return {"schedule": {
            "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": [],
            "–≤—Ç–æ—Ä–Ω–∏–∫": [],
            "—Å—Ä–µ–¥–∞": [],
            "—á–µ—Ç–≤–µ—Ä–≥": [],
            "–ø—è—Ç–Ω–∏—Ü–∞": [],
            "—Å—É–±–±–æ—Ç–∞": [],
            "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ": []
        }}

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

@router.message(F.text == "/start")
async def start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø SmartPlannerBot ü§ñ\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º.\n\n"
        "üìÖ –ö–æ–º–∞–Ω–¥—ã:\n"
        "/add ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É\n"
        "/show ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É\n\n"
        "–Ø —Ç–∞–∫–∂–µ —É–º–µ—é –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏.\n"
        "–ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì."
    )

@router.message(F.text == "/add")
async def add_event_start(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏ –¥–∞—Ç—É –¥–ª—è —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ `–î–î.–ú–ú.–ì–ì–ì–ì`\n–ü—Ä–∏–º–µ—Ä: `22.07.2025`")
    await state.set_state(SmartPlannerStates.waiting_for_date)

@router.message(SmartPlannerStates.waiting_for_date)
async def add_event_date(message: Message, state: FSMContext):
    try:
        date = datetime.strptime(message.text.strip(), "%d.%m.%Y").strftime("%d.%m.%Y")
        await state.update_data(date=date)
        await message.answer(
            "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –≤—Ä–µ–º—è –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n"
            "–ü—Ä–∏–º–µ—Ä: `14:30 –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ —Å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–º`"
        )
        await state.set_state(SmartPlannerStates.waiting_for_event_text)
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –í–≤–µ–¥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `–î–î.–ú–ú.–ì–ì–ì–ì`, –Ω–∞–ø—Ä–∏–º–µ—Ä `22.07.2025`.")

@router.message(SmartPlannerStates.waiting_for_event_text)
async def add_event_text(message: Message, state: FSMContext):
    parts = message.text.strip().split(maxsplit=1)
    if len(parts) != 2:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≤—Ä–µ–º—è –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n–ü—Ä–∏–º–µ—Ä: `14:30 –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è –ø–æ –≥–µ–æ–º–µ—Ç—Ä–∏–∏`")
        return

    time_part, description = parts
    try:
        datetime.strptime(time_part, "%H:%M")
    except ValueError:
        await message.answer("–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ `–ß–ß:–ú–ú` (–Ω–∞–ø—Ä–∏–º–µ—Ä, `09:00`). –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        return

    user_data = await state.get_data()
    date = user_data["date"]
    user_id = str(message.from_user.id)

    data = load_data()
    if user_id not in data:
        data[user_id] = {}
    if date not in data[user_id]:
        data[user_id][date] = []

    data[user_id][date].append(f"{time_part} ‚Äî {description}")
    data[user_id][date].sort()  # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏

    save_data(data)
    await message.answer(f"‚úÖ –°–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∞ {date}: {time_part} ‚Äî {description}")
    await state.clear()

@router.message(F.text == "/show")
async def show_schedule_start(message: Message, state: FSMContext):
    await message.answer(
        "–í–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ `–î–î.–ú–ú.–ì–ì–ì–ì`, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: `22.07.2025`"
    )
    await state.set_state(SmartPlannerStates.waiting_for_show_date)

@router.message(SmartPlannerStates.waiting_for_show_date)
async def show_schedule_date(message: Message, state: FSMContext):
    date_text = message.text.strip()
    try:
        datetime.strptime(date_text, "%d.%m.%Y")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –¥–∞—Ç—É –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: `–î–î.–ú–ú.–ì–ì–ì–ì`")
        return

    user_id = str(message.from_user.id)
    data = load_data()

    user_events = data.get(user_id, {}).get(date_text, [])
    day_name = datetime.strptime(date_text, "%d.%m.%Y").strftime("%A").lower()
    school_schedule = data.get("schedule", {}).get(day_name, [])

    if not user_events and not school_schedule:
        await message.answer(f"‚ùå –ù–∞ {date_text} –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ.")
    else:
        response = f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {date_text}:\n"
        if school_schedule:
            response += "\nüìö –£—Ä–æ–∫–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é:\n" + "\n".join(f"‚Ä¢ {lesson}" for lesson in school_schedule)
        if user_events:
            response += "\n\nüìù –õ–∏—á–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:\n" + "\n".join(f"‚Ä¢ {event}" for event in user_events)
        await message.answer(response)

    await state.clear()